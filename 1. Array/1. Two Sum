class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> helper;
        helper=nums;
        sort(helper.begin(), helper.end());
        int start=0;
        int end = nums.size()-1;
        vector<int> element;
        while(start<end){
            if(helper[start]+helper[end]==target){
                element.push_back(helper[start]);
                element.push_back(helper[end]);
                break;
            }
            else if(helper[start]+helper[end]<target)start++;
            else{
                end--;
            }
        }
        vector<int> element_index;
        for(int i=0;i<nums.size();i++){
            if(nums[i]==element[0])element_index.push_back(i);
            else if(nums[i]==element[1])element_index.push_back(i);
        }
        return element_index;
    }
};


O(n)->unordered_map

class Solution {
public:
vector<int> twoSum(vector<int> &numbers, int target)
{
    //Key is the number and value is its index in the vector.
	unordered_map<int, int> hash;
	vector<int> result;
	for (int i = 0; i < numbers.size(); i++) {
		int numberToFind = target - numbers[i];

            //if numberToFind is found in map, return them
		if (hash.find(numberToFind) != hash.end()) {
			result.push_back(hash[numberToFind]);
			result.push_back(i);			
			return result;
		}

            //number was not found. Put it in the map.
		hash[numbers[i]] = i;
	}
	return result;
}
};
